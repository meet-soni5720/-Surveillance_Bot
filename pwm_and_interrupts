
    
#define F_CPU  8000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
int cliflag = 0;
void forward();
void backward();
void right();
void left();
void sright();
void sleft();
void stop();
void PWM_init()
 {
	 TCCR1B |=(0<<WGM13)|(1<<WGM12)|(1<<CS10);  // fast pwm is activate
	 TCCR1A|=(1<<COM1A1)|(1<<WGM11)|(1<<COM1B1)|(1<<COM1C1); //COMC1  FOR FAST PWM
	 DDRB |= (1<<PINB6)|(1<<PINB5);
 } 
 
 ISR(INT1_vect)
{
	PORTC |= (1<<PINC0)|(1<<PINC1);
	_delay_ms(100);
	cliflag=1;
}

int main(void)
{
	DDRA = 0b00001111;
	DDRB = 0b11100000;
	DDRC = 0xFF;
	DDRD = 0xFF;
	
	EIMSK |= (1<<INT1);
	EICRA |= (1<<ISC01); //falling edge generates interrupt request

	PORTD |=(1 << PIND1);
	
	
	PWM_init();

	
	while (1)
	{
		if (cliflag==0)
		{
			sei();
		}
		else
		{
			cli();
			_delay_ms(1000);
			cliflag=0;
		}
	}
	
	
	
}

         void forward()
		  {
			  PORTA=0b11000011;
			  OCR1A = 255; //setting PWM to 100% duty cycle
			  OCR1B = 255;
			  
		  }
	 void backward()
		  {
			  PORTA=0b00000000;
			  OCR1A = 255; //setting PWM to 100% duty cycle
			  OCR1B= 255;
			  
		  }
		  // OCR1A FOR LEFT AND OCR1B FOR RIGHT
		  
	 void left()
		  {
			  PORTA=0b10000001;
			  OCR1A=0; //setting PWM to 50% duty cycle
			  OCR1B=127;
			  
		  }

         void right()
		  {
			  PORTA=0b01000010;
			  OCR1A = 127; //setting PWM to 50% duty cycle
			  OCR1B = 0;
			  
		  }
	 void sleft()
		  {
			  PORTA=0b10000001;
			  OCR1A = 200; //setting PWM to 50% duty cycle
			  OCR1B = 127;
			  
		  }
         void sright()
		  {
			  PORTA=0b01000010;
			  OCR1A=127; //setting PWM to 50% duty cycle
			  OCR1B=200;
		  }  
		 
         void revright()
		  {
			  PORTA = 0b00000000;
			  OCR1A = 127;
			  
			  
			  OCR1B = 200;
		  }
         void revleft()
		  {
			  PORTA = 0x00;
			  OCR1A = 200;
			  OCR1B = 127;
		  }
         void stop()
		 {
			 PORTA = 0x00;
			 OCR1A = 0;
			 OCR1B = 0;
		 }


